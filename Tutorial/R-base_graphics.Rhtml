<html>

<head>
<title>Getting Started with R - R-base graphics</title>
<link rel="stylesheet" type="text/css" href="stylesheet.css">

</head>

<body>

<h1>R-base graphics</h1>

<p>R-base is the basic set of functions that come with R as standard - before you start to download any additional packages. The graphics functions included in R-base are simple, but also highly customisable, and capable of producing high standard, publication quality graphics.</p>

<p>There are other graphics packages which offer more advanced graphical functions like <b>ggplot2</b>, these will not be covered in this course.</p>

<h2>Scatterplots</h2>

<p>The basic plotting functions are very easy, but we first need some data to work with. For this example we are going to use one of the inbuilt datasets in R. There are a number of datasets which come readily loaded with the <tt>datasets</tt> package. In this example we are using the <tt>trees</tt> dataset, which contains 'measurements of the girth, height and volume of timber in 31 felled black cherry trees' (See <tt>?trees</tt> for more information)</p>

<p>First, we will look at the data.</p>

<!--begin.rcode
trees
end.rcode-->

<p>So far so good. To produce a basic scatterplot in R is very simple. We use the <tt>plot</tt> command. In this example, we need to specify which parts of the trees dataset we are going to use. Just as revision, we will try three different ways of doing thise - all will produce the same plot, but each one has a subtly different use.</p>

<p>In the first example, we select a subscript from the dataframe using square brackets <tt>[,1]</tt>. Refer back to <a href="Tutorial/getting_data_into_R.html">Getting data into R</a> if you are unsure. This can be a useful way to select data from a larger dataset, if for instance we are dealing with vectors and matrices. See <a href="Tutorial/data_structures.html">Data structures</a> if you want to read more about these. 

<!--begin.rcode
plot(
     x=trees[,1],
     y=trees[,2]
     )
end.rcode-->

<p>The second way, we will use the <tt>$</tt> operator to select a column from within the dataframe:</p>

<!--begin.rcode
plot(
     x=trees$Girth,
     y=trees$Height
     )
end.rcode-->

<p>And finally, we can try the <tt>with()</tt> function. Using <tt>with()</tt> dispenses with the need for the <tt>$</tt> operator, and allows us to call objects within a dataframe without specifying the name of the dataframe every time.</p>

<!--begin.rcode
with(trees,
plot(
     x=Girth,
     y=Height
     )
     )
end.rcode-->

<p>It doesn't really matter which method you use in this example, but it is useful to revise different ways of getting at data within a dataframe</p>

<p>This plot is not particularly inspiring, so let's look at some of the ways we can make it nicer.</p>

<p>Within the <tt>plot</tt> command, there are a number of arguments that we can change in order to alter the appearance of the plot, these are listed below, lifted from the help file for <tt>?plot</tt>. You can get a similar list of arguments for any of the other plot functions (or indeed any function) by calling up the help file for that function (just place a "?" in front of the function: e.g. <tt>?boxplot</tt>).</p>


<div style="background-color: lightgray";>
<h4>Arguments</h4>

<table summary="R argblock">
<tr valign="top"><td><code>type</code></td>
<td>
<p>1-character string giving the type of plot desired.  The
following values are possible, for details, see <code>plot</code>:
<code>"p"</code> for points, <code>"l"</code> for lines,
<code>"b"</code> for both points and lines,
<code>"c"</code> for empty points joined by lines,
<code>"o"</code> for overplotted points and lines,
<code>"s"</code> and <code>"S"</code> for stair steps and
<code>"h"</code> for histogram-like vertical lines.  Finally,
<code>"n"</code> does not produce any points or lines.</p>
</td></tr>
<tr valign="top"><td><code>xlim</code></td>
<td>
<p>the x limits (x1, x2) of the plot.  Note that <code>x1 &gt; x2</code>
is allowed and leads to a &lsquo;reversed axis&rsquo;.
</p>
<p>The default value, <code>NULL</code>, indicates that the range of the finite values to be plotted should be used.</p>
</td></tr>
<tr valign="top"><td><code>ylim</code></td>
<td>
<p>the y limits of the plot.</p>
</td></tr>
<tr valign="top"><td><code>log</code></td>
<td>
<p>a character string which contains <code>"x"</code> if the x axis
is to be logarithmic, <code>"y"</code> if the y axis is to be logarithmic
and <code>"xy"</code> or <code>"yx"</code> if both axes are to be logarithmic.</p>
</td></tr>
<tr valign="top"><td><code>main</code></td>
<td>
<p>a main title for the plot, see also <code>title</code>.</p>
</td></tr>
<tr valign="top"><td><code>sub</code></td>
<td>
<p>a sub title for the plot.</p>
</td></tr>
<tr valign="top"><td><code>xlab</code></td>
<td>
<p>a label for the x axis, defaults to a description of <code>x</code>.</p>
</td></tr>
<tr valign="top"><td><code>ylab</code></td>
<td>
<p>a label for the y axis, defaults to a description of <code>y</code>.</p>
</td></tr>
<tr valign="top"><td><code>ann</code></td>
<td>
<p>a logical value indicating whether the default annotation
(title and x and y axis labels) should appear on the plot.</p>
</td></tr>
<tr valign="top"><td><code>axes</code></td>
<td>
<p>a logical value indicating whether both axes should be drawn on
the plot.  Use graphical parameter <code>"xaxt"</code> or <code>"yaxt"</code>
to suppress just one of the axes.</p>
</td></tr>
<tr valign="top"><td><code>frame.plot</code></td>
<td>
<p>a logical indicating whether a box should be drawn
around the plot.</p>
</td></tr>
<tr valign="top"><td><code>panel.first</code></td>
<td>
<p>an &lsquo;expression&rsquo; to be evaluated after the
plot axes are set up but before any plotting takes place.  This can
be useful for drawing background grids or scatterplot smooths.  Note
that this works by lazy evaluation: passing this argument from other
<code>plot</code> methods may well not work since it may be evaluated too
early.</p>
</td></tr>
<tr valign="top"><td><code>panel.last</code></td>
<td>
<p>an expression to be evaluated after plotting has
taken place but before the axes, title and box are added.  See the
comments about <code>panel.first</code>.</p>
</td></tr>
<tr valign="top"><td><code>asp</code></td>
<td>
<p>the <i>y/x</i> aspect ratio, see <code>plot.window</code>.</p>
</td></tr>
<tr valign="top"><td><code>...</code></td>
<td>
<p>other graphical parameters (see <code>par</code> and
section &lsquo;Details&rsquo; below).</p>
</td></tr>
</table>
</div>

<p>So lets change some general things first. We'll label the axes (<tt>xlab</tt> or <tt>ylab</tt>)  and change the shape (<tt>pch</tt>) and colour (<tt>col</tt>) of the points.</p>

<!--begin.rcode

with(trees,
plot(
     x=Girth,
     y=Height,
     xlab="Girth (in)",
     ylab="Height (ft)",
     pch=16,
     col="red"
     )
     )


end.rcode-->

<br>

<p>A little bit better...</p>

<p>Note that there a wide range of symbol shapes available...</p>

<img src="http://rgraphics.limnology.wisc.edu/images/miscellaneous/pch.png" alt="http://rgraphics.limnology.wisc.edu/images/miscellaneous/pch.png">

<p>...and pretty much any colour you can imagine. Colours can either be specified as a name (e.g. "red"<a href="#footnote-2">[2]</a>, as a hexadecimal code (e.g. <tt>col = "#FF0000"</tt>) or in RGB format (e.g. <tt>col = rgb(1, 0, 0)</tt>). Try <a href="http://www.colorpicker.com/">http://www.colorpicker.com</a>) if you get stuck. Note that unless you are going topay for colour figures in journal plates, or you can be sure that no colour blind people will read your work, it is good practice to use a combination of colours and symbols</p>

<p>We can use the package <tt>RColorBrewer</tt> to make picking complementary colour palettes a little easier. See <tt>?RColorBrewer</tt> or <a href="http://colorbrewer2.org">http://colorbrewer2.org</a> for more information. There are a number of palettes for different applications. We will just use the first of them - this palette is good for colouring lines and points, but shoudl be avoided for blocks of colour.</p>


<!--begin.rcode
install.packages("RColorBrewer")
library(RColorBrewer)

display.brewer.pal(n=9,name="Set1") 

pal <- brewer.pal(n=9,name="Set1")
end.rcode-->




<p>In the following plot, we start by altering one of the parameters of the plot space, with the <tt>par()</tt> command. We'll talk in more detail about this later, but for now, all you need to know is that <tt>par(mfrow=c(2,2))</tt> will split the plotting area into four, allowing us to plot four graphs one after the other in the same space. The <tt>c(2,2)<\tt> means 2 rows * 2 columns. We'll play with this again later.</p>


<p>As before, we import directly from an online text file</p>

<!--begin.rcode
sapdecay <- read.table(
     "http://www.bio.ic.ac.uk/research/mjcraw/therbook/data/sapdecay.txt", 
     header=T
     )

plot(sapdecay$y,sapdecay$x,log="x")
end.rcode-->

<p> We'll call the data to examine it. Note this data is dealt with on p70 of 'The R Book'. remember that typing the name of the object <tt>sapdecay</tt> is the 'short-hand' equivalent of typing <tt>print(sapdecay)</tt> - there are certain occasions when it will be necessary to use the full command - more of that later.</p>

<!--begin.rcode
sapdecay
end.rcode-->

<p>So, we have two columns of data, which we will plot against each other - this is very simple</p>

<!--begin.rcode
plot(sapdecay)
end.rcode-->

<p>In this example, R recognises that there are two columns in the object sapdecay, and it simply plots them against each other. This kind of command is called a lazy command, because we have not specified any of the arguments explicitly.</p>

<p>The long version would be:</p>

<!--begin.rcode
plot(
     x = sapdecay$x,
     y = sapdecay$y
     )
end.rcode-->

<p> Note that we can also dispence with the sapdecay$ by using the with() command:</p>

<!--begin.rcode
with(
     sapdecay,
     plot(
          x = x,
          y = y
          )
     )
end.rcode-->

<p>This isn't a particularly inspiring plot, so let's make it look a little better...</p>

<p>First let's make it a little easier to see al the changes that we are making</p>

<!--begin.rcode


# First let's make it a little easier to see al the changes that we are making

par(mfrow = c(2,2)) 

# This command splits the plotting area into four, so we can see four plots side
# by side. We'll cover the par command in more detail in the next section. We
# then simply make four plots, one after the other, and they will fill up the
# plotting area.

with(
     sapdecay,
     plot(
          x = x,
          y = y,
          xlab = "Time (hours)",
          ylab = "Decay rate",
          type = "l",
          col = "red",
          lwd = 2,
          main = "Line"
          )
     )

with(
     sapdecay,
     plot(
          x = x,
          y = y,
          xlab = "Time (hours)",
          ylab = "Decay rate",
          type = "o",
          col = "green",
          lwd = 1,
          main = "Overplot"
          )
     )

with(
     sapdecay,
     plot(
          x = x,
          y = y,
          xlab = "Time (hours)",
          ylab = "Decay rate",
          type = "h",
          col = "blue",
          lwd = 2,
          main = "Histogram"
          )
     )

with(
     sapdecay,
     plot(
          x = x,
          y = y,
          xlab = "Time (hours)",
          ylab = "Decay rate",
          type = "s",
          col = "hotpink",
          lwd = 2,
          main = "Step"
          )
     )

# It's important that we reset the mfrow parameter at the end of plotting,
# otherwise all subsequent plots will apear on this four by four grid, which may
# not be what we want.

par(mfrow = c(1,1))

end.rcode-->

<p>Using this method, it's also perfectly possible to combine plots of two different types, and plot them next to each other.</p>

<p>Let's imagine that we want to test whether a variable is normally distributed - there are two very simple graphical commands built into R that make this easier: <tt>qqnorm</tt> and <tt>qqplot</tt>. These commands produce quantile-quantile plots for the normal distribution. Essentially if the data are normally distributed, they will conform to the straight line<a href="#footnote-1">[1]</a>.</p>

<p>First we will create a vector of random numbers drawn from a normal distribution - so we already know that they are normal!</p>

<!--begin.rcode
normal_data <- rnorm(100,mean=0,sd=1)

normal_data
end.rcode-->

<p>And now...some plots. First, two plots side by side.</p>

<!--begin.rcode

par(mfrow=c(1,2)) 

# Remember that the first number is the number of rows, the latter is the number
# of columns. So here, we have specified one row, two columns...

# Now the plots:

hist(normal_data)

qqnorm(normal_data)
qqline(normal_data)
end.rcode-->

<p>So things should look pretty normal. In this example we have not specified a 'seed' (see <tt>?set.seed</tt> for more info). So every time that you run the code, you will get a different set of randomly generated numbers drawn from a normal distribution.</p>

<p>All well and good, but what about one above the other? Just changed the one and 2 around in the <tt>par(mfrow=c(x,y))</tt> command.</p>

<!--begin.rcode

par(mfrow=c(2,1)) 

# Remember that the first number is the number of rows, the latter is the number
# of columns. So here, we have specified one row, two columns...

# Now the plots:

hist(normal_data)

qqnorm(normal_data)
qqline(normal_data)
end.rcode-->

<h2>Scatterplots</h2>

<p>Now let's look in more detail at scatterplots, and some of the functions we can use to customise them, in order to build publication quality plots.</p>


<h2>Customising your plots</h2>

<p>There are a number of arguments that can be passed to the plot commands in order to customise your plots. The below list is lifted from the help file for the <tt>?plot.default</tt> command. You can normally get similar lists of possible arguments for other commands: e.g. <tt>?hist</tt>.</p>




<div class="ex">

<h2>Exercise</h2>

<p>Try customising some of the previous plots by altering some of these arguments for yourself...</p>

<p>Below is a plot produced using the <tt>sapdecay</tt> vector we produced earlier. See if you can reproduce it by changing the arguments listed above.</p>

</div>

<!--begin.rcode echo=FALSE,fig.height=6
plot(
     sapdecay,
     xlab="Time (hours)",
     ylab=bquote(Decay~rate~(tau))
          )
end.rcode-->



<br><br>
<hr>

<p id="footnote-1">[1] I'm not going to dwell on the reasons why this is so - we're more interested in the plotting graphs than the statistics behind it in this sections, but if you don't understand what is going on here, you should look it! <a href="http://en.wikipedia.org/wiki/Q%E2%80%93Q_plot">http://en.wikipedia.org/wiki/Q-Q_plot</a>.</p>

<div id="footnote-2">[2]<br><img src="http://sape.inf.usi.ch/sites/default/files/ggplot2-colour-names.png" alt="http://sape.inf.usi.ch/sites/default/files/ggplot2-colour-names.png"></div>




</body>

</html>
