<html>

<head>
<title>Getting Started with R - Getting data into R</title>
<link rel="stylesheet" type="text/css" href="stylesheet.css">

</head>

<body>

<table align="center" style="width:80%;">
<tr>
<td class="next"><a href="installing_R_packages.html">Previous</a></td>
<td class="next"><a href="index.html">Course Overview</a></td>
<td class="next"><a href="selecting_data.html">Next</a></td>
</tr>
</table>

<br><hr class="ex1"><br>

<h1>Getting data into <tt>R</tt></h1>

<p>Probably the first question you are likely to ask when approaching R for the first time is 'how do I get my data into R'?</p>

<p>R is able to read directly from excel spread sheets using a number of packages, however they usually take some tweaking. In this tutorial we will restrict ourselves to importing data from 'comma separated values' (.csv) files and 'tab delimited' text files (.txt). You can create files in this format using the 'Save As' menu in Excel, or whichever spread sheet software you are using.</p>

<h2>Small variables</h2>

<p>Sometimes you will need to insert data into R which is small and is not stored in an external file. There are two easy ways to do this.</p>

<p>In the following example we use the <tt>c()</tt> or concatenate function. This works exactly the same way in R as the CONCATENATE() function in Excel, which you may be familiar with. In the example that follows, we call the function <tt>c()</tt> and specify a number of 'arguments' which follow - in this case a string of numbers that we want to combine.</p>

<p>Get used to the idea of calling functions like this with a number of arguments following - we will do this a lot!</p>


<p>Create an object called short_variable, and assign a series of numbers to it. We use <tt><-</tt> to create the object. This is called 'gets'.</p>

<!--begin.rcode
short_variable <- c(1,5,6,7,9,2,10)
end.rcode-->


<p>To see what is contained within an object, simply input the name of the object.</p>

<!--begin.rcode
short_variable
end.rcode-->

<p>Note that this the equivalent in R of writing <tt>print(short_variable)</tt>. This is not particularly important in this course, but it becomes important as you begin to write your own functions.</p>

<!--
<p> A more convenient way of entering a series of numbers is to use the <tt>scan()</tt> function. You must still assign a name to the object you are creating as before, but <tt>scan()</tt> will allow you to enter the data more easily. </p>

<div class= "ex">
<h3>Exercise</h3>
<p>Try creating a variable called <tt>short_variable2</tt> and populate it with 10 numbers, using <tt>scan()</tt>.</p>
</div>
-->

<h2>Importing from the clipboard</h2>

<p>It is possible to import data from R directly from the clipboard - having just copied a table from a spreadsheet. Simply select the table of interest and copy it to clipboard as usual (Ctrl + C). The following code will then allow you to paste the table directly into R.</p>

<p>Note that when importing data from a spreadsheet, R does not like:</p>

<ul>
<li>Missing values</li>
<li>Unfilled lines</li>
<li>Special characters</li>
<li>Spaces</li>
</ul>

<p>If you try to import data which contains any of these, you will encounter an error. Character strings can be wrapped in double quote marks ("") in order to allow the use of spaces in qualitative data, but in general, it is best to avoid the use of spaces in titles, instead use underscore (_) or a full stop (.) between words.</p>

<p>Importing data correctly is not always easy, and you will rarely get it right first time. More on this topic can be found here: <a href="http://cran.r-project.org/doc/manuals/R-data.pdf">http://cran.r-project.org/doc/manuals/R-data.pdf</a> and <a href="http://vita.had.co.nz/papers/tidy-data.pdf">http://vita.had.co.nz/papers/tidy-data.pdf</a>.</p>

<p> Try the code below to import some data from a spreadsheet of your own. The line <tt>header = T</tt>  tells R that you have copied the column headers with the data too.</p>

<!--begin.rcode,eval=FALSE,tidy=FALSE
new_table <- read.table(
     "clipboard", 
     header = T
     )
end.rcode-->

<p>If you copy direct from excel, this should work, but you may also want to copy from a 'comma separated values' file (.csv), in which case you need to tell R using the argument <tt>sep = ","</tt>, or equivalent.</p>

<p>Whilst this is an easy way of getting data into R, <b>I do not recommend it</b>, unless you then plan on re-saving the data using R. The problem with this kind of method is that it is all too easy to forget exactly which spreadsheet you copied the data from. Plus it increases the number of steps required to reproduce your analysis.</p>

<p>One solution to this, is to use R to re-save your data in a new format. This is very similar to the process of importing a new table:</p>

<!--begin.rcode,eval=FALSE,tidy=FALSE

write.table(
     new_table, 
     "new_table.csv", 
     sep = ",", 
     row.names = FALSE
     )

end.rcode-->

<p>In this example, we save the data to the working directory, and we specify that the file is separated by commas. We also ask R to remove the row names - by default it usually includes a column of row names, which can make the file difficult to read in other programs.</p>

<p>In the next section we will see how to import files like the one we have just produced.</p> 


<h2>Importing tables from files</h2>

<p>Obviously you won't want to manually input all your data, it is much easier to import from a file which you have prepared in a spread sheet. As mentioned, in this course we will work exclusively with the simple formats '.csv' and .txt.</p>

<p>When importing data from files, there are a few rules that must be adhered to, otherwise R will throw up an error.</p>

<ul>
<li>Data must be complete. Any missing values should be replaced with NA.<br></li>
<li>There must be no spaces in text (e.g. column titles), you should either use underscores, e.g.: my_variable, or conflate words using capitals to separate, e.g.: myVariable.<br></li>
<li>Data should be arranged in 'long' format and be 'tidy'. This is required for many types of analysis in R - a good paper on this can be found <a href="http://vita.had.co.nz/papers/tidy-data.pdf">here</a> - more on this later.<br></li>
</ul>

<p>Let's assume we've done that already:</p>

<p>To import from a '.txt' file we used the <tt>read.table()</tt> function again you must assign the function a name first. In this case we will import a data file referred to in 'The R book'. Notice that we are able to import it directly from the internet, but the location could just as easily be a local folder: <tt>C://data/</tt>.</p>

<!--begin.rcode,tidy=FALSE
rats <- read.table(
     "http://www.bio.ic.ac.uk/research/mjcraw/therbook/data/rats.txt", 
     header = T
     )
end.rcode-->

<p>Call the data to examine it. Note this data is dealt with on p475 of 'The R Book'</p>

<!--begin.rcode,tidy=FALSE
rats
end.rcode-->

<p>This isn't a particularly big table so we can view the whole thing at once, but if it was longer we might want to summarise the data or look at smaller chunks of it.</p>

<p>we can look at the first 6 rows with:</p>

<!--begin.rcode,tidy=FALSE
head(rats)
end.rcode-->

<p>Or the last 6 rows with:</p>

<!--begin.rcode,tidy=FALSE
tail(rats)
end.rcode-->

<p>We can select individual columns or rows with square brackets. <tt>rats[1,1]</tt> will give you the value on the first row of the first column:</p>

<!--begin.rcode,tidy=FALSE
rats[1,1]
end.rcode-->


<p>The first number denotes row, the second column. So to see the whole first row, we do:</p>

<!--begin.rcode,tidy=FALSE
rats[1,]
end.rcode-->

<p>We can also specify a series by using a colon:</p>

<!--begin.rcode,tidy=FALSE
rats[1:10,]
end.rcode-->

<p>If we wanted every third row, we could use the <tt>seq()</tt> function:</p>

<!--begin.rcode,tidy=FALSE
rats[seq(3,36,3),]
end.rcode-->

<p>In this case the three arguments in the seq function mean: start at value 3, end at value 36, and jump 3 rows at a time.</p>

<p>We can also compute some summary statistics from the data:</p>

<!--begin.rcode,tidy=FALSE
summary(rats)
end.rcode-->

<p>Or look at the structure of the object</p>

<!--begin.rcode,tidy=FALSE
str(rats)
end.rcode-->

<p><tt>str()</tt> is useful, because it lets us know how R is seeing the parts of this table. <tt>int</tt> for instance means integer. If we were wanting to conduct an ANOVA on the rats data, we would need to tell R that Treatment, Rat and, Liver are categorical values, not continuous, otherwise we would be doing the wrong analysis. Note that R will always assume integers to be continuous, unless we explicitly tell it otherwise by labeling it as a <tt>factor</tt>.</p>

<p>To solve this, either use characters - A, B, C instead of 1, 2, 3 for factors, or convert them manually:</p>

<!--begin.rcode,tidy=FALSE
rats$Treatment <- factor(
     rats$Treatment
     )
end.rcode-->

<p>By using the factor command, we in effect convert a continuous variable into a categorical one:</p>

<!--begin.rcode,tidy=FALSE
str(rats)
end.rcode-->

<p>Now convert Rat and Liver into categorical variables in the same way - we will need this data later.</p>

<!--begin.rcode,eval=TRUE,include=FALSE,tidy=FALSE

rats$Rat <- factor(rats$Rat)
rats$Liver <- factor(rats$Liver)

end.rcode-->

<p>There is a dedicated function <tt>revalue()</tt> to convert numerical factor levels to character based levels in the library <tt>plyr</tt>. This can save you the hassle of using <tt>factor()</tt> each time you open a dataset (although you could of course do this in your spreadsheet).</p>



<!--begin.rcode,tidy=FALSE

# Load the package plyr:

library(plyr)

rats$Treatment1 <- revalue(
     rats$Treatment, 
     c("1" = "A", "2" = "B", "3" = "C")
     )

rats$Treatment
rats$Treatment1

end.rcode-->


<p>Note that in these two examples we refer to the individual columns of the table with a <tt>$</tt>. R studio is great for this. Type <tt>rats$</tt> in the console and the press the tab button. RStudio will then automatically complete the variable name, or give you the options available. Try it.</p>

<p>We could also have referred to the columns by number: <tt>rats[ ,1]</tt>.</p>

<p>Another option which gives you a much more familiar spread sheet like view is <tt>fix(rats)</tt> - try this too.</p>

<p>If you have followed the above instructions, you should have something that looks like this:</p>

<!--begin.rcode,tidy=FALSE
str(rats)

rats
end.rcode-->



<p>Note that a longer discussion of getting data from excel files is available here: <a href="http://www.r-bloggers.com/read-excel-files-from-r/">http://www.r-bloggers.com/read-excel-files-from-r/</a>.</p>

<div class = "ex">
<h3>Exercise</h3>
<p>Data recorded by an environmental sensor are available online here: <a href="http://goo.gl/D0r4Z6">http://goo.gl/D0r4Z6</a>. Use the methods you have learned so far to import this data into <tt>R</tt>. It is is comma-separated-values (<tt>.csv</tt>) format.</p>

<p>Once you have imported the data, have a look at the structure of the data, and create a summary of the last three columns. You will need to subset the data using the square brackets for this.</p>


<p>Finally, create a new object called <tt>maximae</tt> including only rows <tt>144</tt>, <tt>542</tt>, <tt>965</tt>, <tt>1371</tt> and <tt>1769</tt>.</p>

</div>

<br><hr class="ex1"><br>

<table align="center" style="width:80%;">
<tr>
<td class="next"><a href="installing_R_packages.html">Previous</a></td>
<td class="next"><a href="index.html">Course Overview</a></td>
<td class="next"><a href="selecting_data.html">Next</a></td>
</tr>
</table>

</body>

</html>



